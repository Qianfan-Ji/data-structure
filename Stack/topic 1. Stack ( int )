//建立能够存放十进制整数的顺序栈空栈
#include<bits/stdc++.h>
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10

using namespace std;
typedef int ElemType;
typedef struct{
 	ElemType *base=NULL;
 	ElemType *top=NULL;
 	int stacksize=0;	//栈剩余的容量，以元素为单位
} SqStack;

void InitStack(SqStack &s);									//初始化一个空栈
void DestroyStack(SqStack &s);								//销毁栈
void ClearStack(SqStack &s);								//清空栈
bool StackEmpty(SqStack s);									//判断栈是否为空栈，是返回1，否返回0
int StackLength(SqStack s);									//返回栈元素的个数
bool GetTop(SqStack &s,ElemType &e);						//返回栈顶元素，若栈空返回0，否则返回1
void Push(SqStack &s,ElemType e);							//压栈
bool Pop(SqStack &s,ElemType &e);							//出栈
void StackTraverse(SqStack &s,void (*visit)(ElemType*));	//从栈底到顶依次对每个元素使用visit函数
void test_visit(ElemType* p);								//visit函数测试，打印传入元素

ElemType test[150];
ElemType temp,*p=NULL;

int main(){							//main函数中对各函数进行测试，确保其准确性
	SqStack s;
	InitStack(s);
	
	for(int i=0;i<146;++i)
	Push(s,i+1);
	
	StackTraverse(s,test_visit);	//打印1~146
	cout<<endl;
	
	ElemType e;
	Pop(s,e);						//进行一次出栈
	
	cout<<StackLength(s)<<endl;		//打印栈长度，145
	
	GetTop(s,e);
	cout<<e<<endl;					//取得栈顶元素，145
	
	ClearStack(s);					//清空栈

	cout<<StackEmpty(s)<<endl;		//判断是否为空栈，打印1
	
	DestroyStack(s);				//销毁栈
	system("pause");
	
	return 0;
}
void InitStack(SqStack &s){
	s.base=(ElemType*)malloc(STACK_INIT_SIZE*sizeof(ElemType));
	if(!s.base)exit(0);
	s.top=s.base;
	s.stacksize=STACK_INIT_SIZE;
}

void DestroyStack(SqStack &s){
	free(s.base);
	s.base=s.top=NULL;
	s.stacksize=0;
}

void ClearStack(SqStack &s){
	s.stacksize+=StackLength(s);
	s.top=s.base;
}

bool StackEmpty(SqStack s){
	return(s.base==s.top);
}

int StackLength(SqStack s){
	return(s.top-s.base);
}

bool GetTop(SqStack &s,ElemType &e){
	if(s.top!=s.base){
		e=*(s.top-1);
		return 1;
	}
	return 0;
}

void Push(SqStack &s,ElemType e){
	if(!s.stacksize){
		int n=s.top-s.base;
		s.base=(ElemType*)realloc(s.base,(STACKINCREMENT+StackLength(s))*sizeof(ElemType));
		if(!s.base)exit(1);
		s.top=s.base+n;
		s.stacksize=STACKINCREMENT;
	}
	*s.top++=e;
	--s.stacksize;
}

bool Pop(SqStack &s,ElemType &e){
	if(s.base==s.top)return 0;
	e=*--s.top;
	++s.stacksize;
	return 1;
}

void StackTraverse(SqStack &s,void (*visit)(ElemType*)){
	ElemType*  temp=s.base;
	while(s.top!=temp++){
		visit(temp-1);
	}
}

void test_visit(ElemType* p){
	//if(!std::cout<<*p<<" ")exit(2);
	if(!printf("%d ",*p))exit(2);
}
