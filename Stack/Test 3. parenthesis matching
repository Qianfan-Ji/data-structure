//在桌面建立一个in.txt文件存放输入数据
#include<bits/stdc++.h>
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
#define IN_REDIRECTION

using namespace std;
typedef char ElemType;
typedef struct{
 	ElemType *base=NULL;
 	ElemType *top=NULL;
 	int stacksize=0;	//栈剩余的容量，以元素为单位
} SqStack;

void InitStack(SqStack &s);									//初始化一个空栈
void DestroyStack(SqStack &s);								//销毁栈
void ClearStack(SqStack &s);								//清空栈
bool StackEmpty(SqStack s);									//判断栈是否为空栈，是返回1，否返回0
int StackLength(SqStack s);									//返回栈元素的个数
bool GetTop(SqStack &s,ElemType &e);						//返回栈顶元素，若栈空返回0，否则返回1
void Push(SqStack &s,ElemType e);							//压栈
bool Pop(SqStack &s,ElemType &e);							//出栈
void StackTraverse(SqStack &s,void (*visit)(ElemType*));	//从栈底到顶依次对每个元素使用visit函数
void test_visit(ElemType* p);								//visit函数测试，打印传入元素
bool matching(ElemType exp[],int n);

ElemType test[1000];

int main(){
#ifdef IN_REDIRECTION
	ifstream fin("C:\\Users\\86139\\Desktop\\in.txt",ios::binary);
	if(!fin){cout<<"in.txt failed open! please check out."<<endl;	exit(0);}
#endif
	while(fin.good()){
	fin.getline(test,1000);
 	cout<<"读入语句为："<<test<<endl;
	bool flag=matching(test,strlen(test));
	if(flag)cout<<"左右括弧匹配 "<<endl;
	else cout<<"左右括弧不匹配 "<<endl;
	cout<<endl;
	}
	return 0;
}

bool matching(char exp[],int n){
	SqStack s;
	int len=n,flag=true;
	char temp;
	InitStack(s);
	while(n--&&flag){
		if(exp[len-n-1]=='{'||exp[len-n-1]=='['||exp[len-n-1]=='('){
			Push(s,exp[len-n-1]);
		}
		
		else if(exp[len-n-1]=='}'||exp[len-n-1]==']'||exp[len-n-1]==')')
			switch(exp[len-n-1]){
				case '}':
					if(GetTop(s,temp)){
						if(temp=='{')	{Pop(s,temp);break;}
						else {flag=false;break;}
					}
					else {flag=false;break;}
				case ']':
					if(GetTop(s,temp)){
						if(temp=='[')	{Pop(s,temp);break;}
						else {flag=false;break;}
					}
					else {flag=false;break;}
				case ')':
					if(GetTop(s,temp)){
						if(temp=='(')	{Pop(s,temp);break;}
						else {flag=false;break;}
					}
					else {flag=false;break;}
			}
	}
	if((n!=-1)||(!flag)||(!StackEmpty(s)))	return false;
	return true;
}

void InitStack(SqStack &s){
	s.base=(ElemType*)malloc(STACK_INIT_SIZE*sizeof(ElemType));
	if(!s.base)exit(0);
	s.top=s.base;
	s.stacksize=STACK_INIT_SIZE;
}

void DestroyStack(SqStack &s){
	free(s.base);
	s.base=s.top=NULL;
	s.stacksize=0;
}

void ClearStack(SqStack &s){
	s.stacksize+=StackLength(s);
	s.top=s.base;
}

bool StackEmpty(SqStack s){
	return(s.base==s.top);
}

int StackLength(SqStack s){
	return(s.top-s.base);
}

bool GetTop(SqStack &s,ElemType &e){
	if(s.top!=s.base){
		e=*(s.top-1);
		return 1;
	}
	return 0;
}

void Push(SqStack &s,ElemType e){
	if(!s.stacksize){
		int n=s.top-s.base;
		s.base=(ElemType*)realloc(s.base,(STACKINCREMENT+StackLength(s))*sizeof(ElemType));
		if(!s.base)exit(1);
		s.top=s.base+n;
		s.stacksize=STACKINCREMENT;
	}
	*s.top++=e;
	--s.stacksize;
}

bool Pop(SqStack &s,ElemType &e){
	if(s.base==s.top)return 0;
	e=*--s.top;
	++s.stacksize;
	return 1;
}

void StackTraverse(SqStack &s,void (*visit)(ElemType*)){
	ElemType*  temp=s.base;
	while(s.top!=temp++){
		visit(temp-1);
	}
}

void test_visit(ElemType* p){
	if(!printf("%c ",*p))exit(2);
}
