//利用栈的特性对输入的字符串完成是否为回文的判断；（例如“雾锁山头山锁雾；天连水尾水连天”）
#include<bits/stdc++.h>
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10

using namespace std;
typedef char ElemType;
typedef struct{
 	ElemType *base=NULL;
 	ElemType *top=NULL;
 	int stacksize=0;	//栈剩余的容量，以元素为单位
} SqStack;

void InitStack(SqStack &s);									//初始化一个空栈
void DestroyStack(SqStack &s);								//销毁栈
void ClearStack(SqStack &s);								//清空栈
bool StackEmpty(SqStack s);									//判断栈是否为空栈，是返回1，否返回0
int StackLength(SqStack s);									//返回栈元素的个数
bool GetTop(SqStack &s,ElemType &e);						//返回栈顶元素，若栈空返回0，否则返回1
void Push(SqStack &s,ElemType e);							//压栈
bool Pop(SqStack &s,ElemType &e);							//出栈
void StackTraverse(SqStack &s,void (*visit)(ElemType*));	//从栈底到顶依次对每个元素使用visit函数

ElemType test[150],temp,temp2;			//此处默认汉字采用GBK编码，占 2字节

int main(){
	SqStack  s;
	InitStack(s);
	cout<<"请输入需要判断的字符串： "<<endl;
	cin>>test;

	int n=strlen(test);
	for(int i=0;i<n;)
	Push(s,test[i++]);
	for(int i=0;i<n;){
		Pop(s,temp);
		if(temp&128){                   //首位是1，按照 GBK码判断该汉字是否符合要求
			Pop(s,temp2);
			if(temp!=test[i+1]||temp2!=test[i]){
				cout<<"不是回文字符串"<<endl;
				return 0;
			}
			else  {
			i+=2;
			continue;
			}
		}
		if(temp!=test[i++]){
			cout<<"不是回文字符串"<<endl;
			return 0;
		}
	}
	cout<<"是回文字符串"<<endl;
	DestroyStack(s);				//销毁栈
	system("pause");

	return 0;
}
void InitStack(SqStack &s){
	s.base=(ElemType*)malloc(STACK_INIT_SIZE*sizeof(ElemType));
	if(!s.base)exit(0);
	s.top=s.base;
	s.stacksize=STACK_INIT_SIZE;
}

void DestroyStack(SqStack &s){
	free(s.base);
	s.base=s.top=NULL;
	s.stacksize=0;
}

void ClearStack(SqStack &s){
	s.stacksize+=StackLength(s);
	s.top=s.base;
}

bool StackEmpty(SqStack s){
	return(s.base==s.top);
}

int StackLength(SqStack s){
	return(s.top-s.base);
}

bool GetTop(SqStack &s,ElemType &e){
	if(s.top!=s.base){
		e=*(s.top-1);
		return 1;
	}
	return 0;
}

void Push(SqStack &s,ElemType e){
	if(!s.stacksize){
		int n=s.top-s.base;
		s.base=(ElemType*)realloc(s.base,(STACKINCREMENT+StackLength(s))*sizeof(ElemType));
		if(!s.base)exit(1);
		s.top=s.base+n;
		s.stacksize=STACKINCREMENT;
	}
	*s.top++=e;
	--s.stacksize;
}

bool Pop(SqStack &s,ElemType &e){
	if(s.base==s.top)return 0;
	e=*--s.top;
	++s.stacksize;
	return 1;
}

void StackTraverse(SqStack &s,void (*visit)(ElemType*)){
	ElemType*  temp=s.base;
	while(s.top!=temp++){
		visit(temp-1);
	}
}
